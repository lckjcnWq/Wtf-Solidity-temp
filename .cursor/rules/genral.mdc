---
description: 
globs: 
alwaysApply: true
---
# 代码结构与注释规范

## 核心设计理念

- 遵循软件工程6大设计原则
- 代码应具备高可维护性、可扩展性和可重用性
- 结构应支持业务需求并适应变化

## 目录结构指南

- **适应语言特性**：根据编程语言特性选择合适的目录结构
- **渐进式演进**：基于现有结构迭代改进，避免激进重构
- **关注点分离**：按功能、领域或层次清晰划分模块
- **结构平衡**：避免过深嵌套，保持合理的组织层次

## 代码质量准则

### 高可扩展性
- 模块化设计，明确定义接口
- 抽象核心逻辑，分离实现细节
- 识别并设计变化点与扩展点
- 恰当使用设计模式，避免过度设计

### 高复用性
- 提取通用功能为独立组件
- 优先使用组合而非继承
- 封装易变部分，保持接口稳定
- 确保单一职责，便于组合使用

### 有效注释
- **类/文件注释**：简述目的、设计意图和使用约束
- **函数注释**：说明功能、参数、返回值和异常
- **关键代码注释**：解释复杂逻辑、算法和非显而易见的决策
- **注释原则**：
  * 解释"为什么"和"如何"，而非仅是"做了什么"
  * 说明业务规则、重要假设和边界条件
  * 避免对显而易见的代码添加冗余注释
  * 代码变更时同步更新相关注释

### 编码实践
- 命名清晰，反映意图和用途
- 一致的编码风格和格式
- 合理的错误处理机制
- 编写易于测试的代码结构

## 质量保障
- 建立自动化测试体系
- 实施代码审查，关注结构与注释质量
- 定期重构，消除技术债务
- 使用静态分析工具验证代码质量

## 演进策略
- 持续评估结构是否适合当前需求
- 根据项目规模和团队变化调整规范
- 保持文档与代码同步
- 促进团队对代码质量的共同责任

记住：优秀的代码不仅能正确运行，更能清晰传达意图。结构与注释应相辅相成，在现有基础上持续改进，而非生搬硬套理论模型。